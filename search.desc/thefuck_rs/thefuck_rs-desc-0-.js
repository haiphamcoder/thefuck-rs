searchState.loadedDescShard("thefuck_rs", 0, "Print alias for current shell\nCommand that should be fixed\nEnable debug output\nEnable experimental instant mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepeat on failure\nLog shell output to the file\nExecute fixed command without confirmation\nConfiguration errors\nContains the error value\nError context for better error messages\nFile system errors\nHistory-related errors\nGeneric I/O errors\nNetwork errors (for future use)\nRule-related errors\nContains the success value\nCommand parsing errors\nPath conversion errors\nProcess and execution errors\nSerde serialization/deserialization errors\nMain error type for the thefuck-rs application\nResult type alias for thefuck-rs operations\nTOML parsing errors\nShell-related errors\nUTF-8 encoding errors\nValidation errors\nCreate a configuration error\nCreate a file system error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a no rules found error\nCreate a parse error\nCreate a path error\nCreate a process error\nCreate a shell error\nCreate a validation error\nAdd context to an error\nRepresents a shell command with its context\nCommand execution result\nRepresents a corrected command\nRepresents a parsed command with program and arguments\nSupported shell types\nGets the command age in minutes\nGets the command age in seconds\nGets a specific argument by index\nGets the number of arguments\nGets all arguments as a vector of strings\nThe command arguments\nGets the command text as a string slice\nGets the full command as a string\nGets the shell name as string\nChecks if the command contains a specific argument\nWorking directory at execution time\nEnvironment variables at execution time\nExecution time in milliseconds\nExit code\nCreates a failed result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a shell from string\nGets an environment variable value\nChecks if the command has any arguments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the command is empty (after trimming)\nChecks if the command is recent (within the last hour)\nChecks if this shell is supported\nCreates a new command instance\nCreates a new parsed command\nCreates a new corrected command\nCreates a new command result\nThe original command text\nThe original command\nParses the command and returns structured data\nPriority of this correction (higher = more likely to be â€¦\nGets the first word of the command (the program name)\nThe program name\nRemoves an environment variable\nWhether this correction requires confirmation\nSets an environment variable\nThe shell that executed the command\nSide effects of this correction\nChecks if the command starts with a specific program\nStandard error\nStandard output\nCreates a successful result\nWhether the command was successful\nThe original command text\nThe corrected command text\nCommand execution timestamp\nGets the command text trimmed of whitespace\nValidates the command\nSets whether confirmation is required\nCreates a new command with a specific working directory\nCreates a new command with environment variables\nAdds a side effect\nCreates a new command with modified text\nCreates a new command with a specific timestamp")